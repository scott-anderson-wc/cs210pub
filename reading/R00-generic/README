Trying out some ideas to standardize the way we write web pages in CS 110.

Ideally, I'd like to be able to focus on writing the content without all
the HTML boilerplate around it. This is the opposite of SSI: the included
part is the part that varies, and the including part is the boilerplate.

On the other hand, if I modify the boilerplate (say, adding an extra .js
or .css file), I don't want to have to modify all my pages.  What I really
want is to be able to dynamically generate a 

foo.html

that #includes a

foo.part

but the foo.html is a symbolic link to a master "boilerplate.html" file
that lives in this directory.

However the foo.html file can't be a symlink because it will slightly vary
based on the filename to be #included.

Also, I don't want to have to routinely invoke special tools because my
colleagues might not do so, and then things get out of sync.

An alternative is to put each reading topic into its own directory:

foo/reading.html

which #includes

reading.part

and all the reading.html files are symlinks to a master "reading.html" in
this directory.

No, this won't work, because we *also* need to modify the title of the
page and the H1 header, and sometimes we want/need to add some custom CSS
to the page, so we'll still need to have an editable .html page. So, we
bag the idea of having symlinks to a master boilerplate file, but instead
have a way to find the pages that vary from our standard.  It's as simple
as:

cd ~cs110/public_html/readings/
for f in */*.html; do
    diff R00-generic/standard.html $f
done

I've written that script in "compare-with-standard.sh"

For the most part, that should yield just titles and headers, but might
pick up other things.

================================================================

The way the Bootstrap structure of these web pages work is that there are
header and footer parts in a directory called "modularity" in
public_html. Thus, the boilerplate (which you can also find in
readings/standard.html) is like this:

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">        
    <title>CS110: TITLE GOES HERE</title>
    <!-- use relative pathnames in #include so when this site is archived,
         say as cs110f15, the include refers to the same file -->
    <!--#set var="reltop" value="../" -->
    <!--#include virtual="../modularity/bs-head-rel.part" -->
 </head>
  <body>
    <!--#include virtual="../modularity/navbar-rel.part" -->
    
    <div class="container">
      <h1>DOCUMENT TITLE <small>optional subtitle</small></h1>
    </div>
    
    <div class="container">
      <div class="row">
            
        MORE INFO LATER            

      </div><!--end of "row"-->
 
    </div> <!--end of container -->
        
    <!--#include virtual="../modularity/bs-footer-rel.part" -->
  </body>

</html>

The SSI variable "reltop" is ../ for files in directories just below
public_html, and can be set to ../../ for files that are deeper. The .part
files in modularity use that variable to load other files, like CSS and
JS.

The Bootstrap ROW consists of 12 columns.  The CS 110 pages devote 3
columns to the position:fixed nav bar, and 9 columns for the rest. Like
this:

         <!-- Three columns of the grid are reserved for the sidebar-->
        <div class="col-md-3">
          <nav id="insert_TOC_here" class="nav bs-sidenav affix hidden-print">
          </nav>
        </div><!--end of "col-md-3" div-->
                                        
        <div class="col-md-9">      
          <!--#include virtual="HTML-1-files/HTML.part" -->
          <!--#include virtual="../modularity/footer.part" -->

        </div><!--end of column -->

You'll notice that the TOC is put in a NAV element (last semester's pages
just used DIV) and that it is automatically computed (last semester's
pages required you to edit the list if you modified the contents). Also,
last semester's pages only used 8 columns for the content; I don't know
why. So, all our page structures need changing. *sigh*

Another issue is that it's sometimes hard for students to find where some
topic was introduced or explained.  Even instructors can search
fruitlessly through several links before finding it. It would be really
nice to have one master (very long) web page that includes *all* the
reading.

If each chunk of reading is set up like this:

reading/foo.html contains
<!--#include virtual="foo-files/foo.part"-->

Then we can virtually concatenate all the content by creating a special
web page, reading/all.html containing:

        <div class="col-md-12">      
          <h1>HTML</h1>
          <!--#include virtual="HTML-1-files/HTML.part" -->
          <h1>HTML5</h1>
          <!--#include virtual="HTML5-files/HTML5.part"-->
          <h1>URLs</h1>
          <!--#include virtual="URLs-files/URLs.part"-->
          <h1>Web Navigation</h1>
          <!--#include virtual="WebNavigation-files/WebNavigation.part" -->
          ...          
        </div><!--end of "col-md-12"-->

which #includes all the other readings, in the correct order.  This allows
people to search for what they are looking for using plain old command-f
or control-f.  

