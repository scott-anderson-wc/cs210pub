<h1>Arrays, Objects, and Loops</h1>

<p>We will now continue to approach more concepts in JavaScript using comparisons from Python.</p>
      
<h2>Arrays</h2>

<p> Arrays are very useful to store collections of values together under one name. JavaScript arrays are equivalent to Python lists.</p>

<p>For example, this is an array of animals.</p>
<pre><code>// Homogeneous array, same type
var animals = ["cat", "dog", "wallaby"];

// Heterogeneous array, different types
var misc = [3.141519, "kitten", true];

// Gets element by index
var meow = animals[0]; 
var woof = animals[1];
var wallabyWallaby = animals[2];

// Adds element to the end of the array. Equivalent to Python's append
animals.push("panda");
</pre></code>
<p>Python and Javascript both accept <b>heterogeneous</b> arrays, where the elements can be of different types 
(unlike some languages, like Java, which only accepts <b>homogeneous</b> arrays).</p>

<p>Like Python, you can get the elements of the array by its index, starting from 0.</p>

<p>Here are some methods for arrays in comparison to Python's lists:</p>
<table style="width:100%", border = 2>
    <tr>
        <td><b>Python</b></td>
        <td><b>JavaScript</b></td>
        <td><b>Description</b></td>
      </tr>
      <tr>
        <td>len(l)</td>
        <td>a.length</td>
        <td>returns length of the list/array</td>
      </tr>
        <tr>
        <td>l.append(item)</td>
        <td>a.push(item)</td>
        <td>Adds item to end.</td>
      </tr>
        <tr>
        <td>l.pop()</td>
        <td>a.pop()</td>
        <td>Pops off last item and returns the value that was removed.</td>
      </tr>
</table>


<h2>Objects</h2>

<p>An object is similar to an array, but instead of numbers as indices, you have strings as indices.</p>
<p>JavaScript objects are very similar to Python dictionaries.</p>

<p>Python</p>
<pre><code># Creates an empty dictionary
emptyDict2 = {}

zoo = {"tigers":2, "panda":1, "flamingos":10}

# Adds to dictionary
zoo["platypuses"] = 4

# Gets value from dictionary
numPanda = zoo["panda"]
</pre></code>

<p>JavaScript:</p>
<pre><code>// creates an empty object
var emptyObj2 = {};

var zoo = {tigers:2, panda:1, flamingos:10}; // String notation not required for keys

// Gets value from object
numPanda = zoo["panda"]; // Must use string form when using braces
numTigers= zoo.tigers; // Dot notation is also accepted
numTigers= zoo.tigers; // Dot notation is also accepted

// Adds to object
zoo["platypuses"] = 4; // Must use string form when using braces
zoo.bears = 25; 
</pre></code>

<p>The main cursory differences between Python dictionaries and JavaScript functions are that:</p>
<ol>
  <li>JavaScript can use dot notation.</li>
  <li>JavaScript keys are always strings, yet do not require string notation when writing the original object. This is because JavaScript automatically converts them into strings, so the
      quotation marks are optional (if they do not contain spaces or special characters, otherwise the quotation marks are still neccessary for keys). However, when indexing using braces, the string form must still be used (even if the original did not use it).</li>
</ol>

<p>We will learn more about JavaScript objects as the course continues, as they play a huge role in the language.</p>

<h2>Loops</h2>

<p>Here is the usual Python for-loop:</p>

<pre><code>animals = ["cat", "dog", "wallaby"];

for animal in animals:
  print animal
</code></pre>
        
<p>This loop style is similar to the <b>for-of loop</b> in JavaScript.</p>

<pre><code>var animals = ["cat", "dog", "wallaby"];

for (var animal of animals) {
  console.log(animal);
}
</pre></code>
        
<p>Here is another type of loop in JavaScript that is quite common:</p>

<img alt ="for-loop" src="../images/forloop.png"> <br> <br>

<pre><code>var animals = ["cat", "dog", "wallaby"];

for (var i = 0; i < animals.length; i++) {
    console.log(animals[i]);
}</code></pre>



<p>This loop can be broken into three parts:</p>
<ol>
  <li>Assign <code>i</code> to be 0, 
  <li>If <code>i</code> is less than the length of animals,
  <li>Increment <code>i</code> by one. 
</ol>

<p>The loop stops when step number 2 no longer holds true, and animals.length > i.</p>  

<p>Finally, note that if you want to iterate over an objects keys and values, you would have to
use the for-of loop:</p>

<pre><code>var zoo = {cat:15, dog:25, wallaby:3};
    
for (var animal in zoo) {
  console.log("zoo." + animal + " = " + zoo[animal]);
}

// Output:
// "zoo.cat = 15"
// "zoo.dog = 25"
// "zoo.wallaby = 3"</code></pre>
