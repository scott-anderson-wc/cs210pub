<!-- 
Author: Eni Mustafaraj
When: February 2014
Purpose: Introduce form fields, without having to discuss how the server 
will deal with them. In this way, we only focus on the fields, so that
we can introduce Javascript functions that deal with forms on the client side.
-->

      <div class="alert alert-info">
        <strong>Reading:</strong> Chapter 14 of your book 
        <em><a href="http://shop.oreilly.com/product/9780596159924.do">Head
        First HTML and CSS</a></em> discusses HTML Forms. At this lecture,
        we will not discuss how forms talk to the server, but will only focus 
        on the HTML elements that go into a form, see pages 652-659 (What can go in a form) 
        and 662-672.
      </div>

<style scoped>
  /* gives us a chance of fitting it on one screen */
  #pizza-form p { margin: 0px }

  #name_value_pairs td:nth-of-type(1) { color: green; }
  #name_value_pairs td:nth-of-type(2) { color: blue; }

</style>

<p>This reading is entirely about HTML, but forms are the primary way of
  getting input from the user, and we will then turn to how that input can
  be accessed using the DOM and jQuery and then processed by our
  JavaScript code.  To add the form processing functionality, we'll have
  to learn about events and event handlers, which is in the next reading.
  This reading is just HTML.

<p>We will not be covering all aspects of HTML forms. We'll focus on just
   a handful that are useful in this course. If you want to learn more,
   there's some additional material at the end, and you're welcome to talk
   to one of us. The most important kinds of inputs we'll learn are:</p>

 <ul>
   <li>text inputs (a single line of text, such as someone's name or favorite
     color
     
   <li>textareas (longer blocks of text, such as someone's address or blog
     entry)

   <li>menus (one of a set of choices, pre-defined by the form's author,
     such as 
     
   <li>buttons, which don't so much give input as trigger behavior.
 </ul>

<h2 id="intro">The <code>form</code> tag</h2>

<p>HTML has a dedicated tag, <code>form</code> that is used as a container
  to package data that might be sent to a web server. The
  attribute <code>method</code> of the element allows the form to either
  request data from the server (<code>method="GET"</code>), or send data
  to the server (<code>method="POST"</code>). However, in order for both
  these operations to happen, the server needs to have some dedicated
  programs (also known as scripts) that can deal with the form data. At
  this point, we will not talk about how this happens (we'll postpone this
  discussion for later in the semester), and only concentrate on the HTML
  elements that are contained inside the form.
            
<p>Let's see an example form, and then we'll look at the code that creates it.

<form id="pizza-form">
  <p><label>Customer name: <input name="customer"></label></p>
  <p><label>Telephone: <input type=tel name="phone"></label></p>
  <p><label>E-mail address: <input type=email name="addr"></label></p>
  <p><label>Size:
      <select name="size">
        <option value="">choose size</option>
        <option value="small">small (10-inch)</option>
        <option value="medium">medium (12-inch)</option>
        <option value="large">large (14-inch)</option>
      </select>
    </label>
  <p><label>Preferred delivery time:
      <input name="due" type=time min="11:00" max="21:00" step="900">
  </label></p>
  <p><label>Delivery instructions:
      <textarea rows="3" cols="30" name="instructions"></textarea>
  </label></p>
  <p><button type="submit">Submit order</button></p>
</form>
          
<div class="bs-callout bs-callout-danger">
  <h4>A note on styling</h4>  
  <p>If you see the above form outside an HTML page with CSS, it will look different. Our 
    lecture page applies styling to it that is not the default way a browser will display
    a form. Please see how the <a href="forms-files/unstyled-form.html">unstyled form</a> looks like.
  <p>Additionally, keep in mind that all form elements are <code>inline</code> elements,
    therefore, in order to appear in separate lines, we wrap them in <code>p</code> elements.</p>
</div>
            
<p>Here's the code that creates that form:</p>
          
<pre id="pizza-form-pre" class="prettyprint lang-html">
  <!-- this content is automatically generated by JS code at the end -->
</pre>

<p>As you can see, there's an outer <code>FORM</code> element that wraps
  up the form inputs.  There are input elements that correspond to
  different places where the user can enter information. Most of the
  inputs use the <code>INPUT</code> tag, but some use tags
  like <code>SELECT</code> (for a drop-down menu)
  and <code>TEXTAREA</code> (for larger blocks of text).  The general term
  is <em>control</em>.  Finally, there's a <code>BUTTON</code> input at
  the end. In a more complete example; clicking this button would send the
  form data to the web server; this one doesn't do anything.</p>

<h2 id="formelements">Form Fields</h2>

<p>Let's look at the different input elements.  The following table shows
  the HTML syntax for including different HTML elements in a form. As you
  will notice, the most common element is <code>&lt;input&gt;</code>,
  which, based on the value for its attribute <code>type</code> will
  display a different kind of input. Play with the rendered version of a
  tag in every row in the table.</p>
          
<table class="table table-bordered table-striped">
  <thead>
    <tr>
      <th>Tag Name</th>
      <th>Rendered Tag</th>
      <th>
        More Info
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><pre class="prettyprint lang-html">&lt;input type="text"&gt;</pre></td>
      <td><input></td>
      <td class="text-center">
        <a href="http://www.w3schools.com/tags/tag_input.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>
    </tr>
    <tr>
      <td><pre class="prettyprint lang-html">Your Age: &lt;input type="number" min="1" max="120"&gt;</pre></td>
      <td>Your Age: <input type=number min="1" max="120"></td>
      <td class="text-center">
        <a href="http://www.w3schools.com/tags/tag_input.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
    <tr>
      <td><pre class="prettyprint lang-html">&lt;input type="range" min="100" max="200"&gt;</pre></td>
      <td><input type=range min="100" max="200"></td>
      <td class="text-center">
        <a href="http://www.w3schools.com/tags/tag_input.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
    <tr>
      <td><pre class="prettyprint lang-html">&lt;input type="date"&gt;</pre></td>
      <td><input type=date></td>
      <td class="text-center">
        <a href="http://www.w3schools.com/tags/tag_input.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
    <tr>
      <td><pre class="prettyprint lang-html">&lt;input type="time"&gt;</pre></td>
      <td><input type=time></td>
      <td class="text-center">
        <a href="http://www.w3schools.com/tags/tag_input.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
    <tr>
      <td><pre class="prettyprint lang-html">&lt;button type="button"&gt;Click me&lt;/button&gt;</pre></td>
      <td><button>Click me</button></td>
      <td class="text-center">
        <a href="http://www.w3schools.com/TAGs/tag_button.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
    <tr>
      <td><pre class="prettyprint lang-html">&lt;textarea rows="2" cols="10"&gt; You can type here&lt;/textarea&gt;</pre></td>
      <td><textarea rows="2" cols="10">You can type here</textarea></td>
      <td class="text-center">
        <a href="http://www.w3schools.com/TAGs/tag_textarea.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
    <tr>
      <td><pre class="prettyprint lang-html">&lt;select&gt;&lt;option&gt;Black &lt;option&gt;White &lt;/select&gt;</pre></td>
      <td><select><option>Black <option>White</select></td>
      <td class="text-center">
        <a href="http://www.w3schools.com/TAGs/tag_textarea.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
  </tbody>
</table>

 <p>For more information on the <code>form</code> elements and all its fields, consult
   the <a href="http://www.w3schools.com/tags/tag_form.asp">W3Schools page on forms</a>.</p>
          
<p>Let's look at some of the more important controls, and then other
  aspect of 

<h2 id="input">The INPUT Tag</h2>
         
<p>The <code>input</code> tag is fairly straightforward, but you can
specify the type of input you are looking for, using the <code>TYPE</code>
attribute.  It has many more types, which we are not listing here;
consult <a href="http://www.w3schools.com/tags/tag_input.asp">W3Schools
page for input</a> to see the complete list. Here are just a few:

<UL>

   <LI><code>TEXT</code>: allows the user to type in a word
   or phrase
            
   <LI><code>PASSWORD</code>: allows the user to type in a word or
   phrase, but its value isn't <em>echoed,</em> so no one can look
   over their shoulder and see it.
            
     <li><code>email</code>:  like a text type, but should look like an
     email address.  New with HTML5.

     <li><code>date</code>: for entering dates.  New with HTML5.

     <li><code>time</code>: for entering times.  New with HTML5.

</UL>

<p>Some of these types (such as time, date, number, range, etc.) were
introduced in HTML5, which means that not all browser versions are able to
support them.  For maximum portability, you should stick
to <code>type=text</code>. However, sliders like we get
with <code>type=range</code> are fun, and we'll use them in this course.

<h2 id="select">The SELECT input</h2>
         
<P>To specify a menu, from which the user can choose only one option,
you use the <code><a
href="http://www.htmlhelp.com/reference/html40/forms/select.html">SELECT</a></code>
tag inside the form. You specify the <code>NAME</code> of the input in
the <code>SELECT</code> tag, and each menu item is specified using the
<code><a
href="http://www.htmlhelp.com/reference/html40/forms/option.html">OPTION</a></code>
tag. Here's an example:

<pre class="prettyprint lang-html">
&lt;form action=""&gt;
  &lt;p&gt;Drink:  &lt;select name="beverage"&gt;
      &lt;option value=""&gt;choose one
      &lt;option value="Coke"&gt;Coca-Cola&lt;/option&gt;
      &lt;option value="Pepsi"&gt;Pepsi-Cola&lt;/option&gt;
      &lt;option&gt;Beer&lt;/option&gt;
      &lt;option&gt;Wine&lt;/option&gt;
   &lt;/select&gt;
&lt;/form&gt;
</pre>

<p>(The closing <code>&lt;/option&gt</code> tag is optional, like a closing 
<code>&lt;/p&gt</code> tag or <code>&lt;/li&gt</code> tag, but it's best
to use it.)  Any option can have a separate "value" attribute; if none is
specified, the value is the option itself.

<p>Specifying a <q>non-option</q> as the first item in the list helps to
tell whether someone has actually made a choice or just overlooked this
menu. Making the non-option have a value of the empty string helps with
<a href="#validation">validating the form</a>.

<h2 id="textarea">The TEXTAREA input</h2>
         
<P>If you want to allow your user to type in a long response, you should
define
a <code><a href="http://www.htmlhelp.com/reference/html40/forms/textarea.html">textarea</a></code>
inside your form. This tag has attributes called <code>ROWS</code> and
<code>COLS</code> that let you specify the size of the area.

<pre class="prettyprint lang-html">
&lt;textarea name="thoughts" rows="3" cols="40"&gt;
A chicken is an egg's way of making another egg
&lt;/textarea&gt;
</pre>
         
<p>The default value is the region between the beginning and ending tag.
Typically, you want the default value to be empty, so put the
tags <em>right</em> next to each other, as in this example here:

<pre class="prettyprint lang-html">
&lt;textarea name="thoughts" rows="3" cols="40"&gt;&lt;/textarea&gt;
</pre>

<p>Don't let even a single space creep in, or the initial value will be a
string of one space, and not the empty string.  That will affect any code
that cares about the default or original value, such as certain kinds of
<a href="#validation">validation</a>

<h2>Labels</h2>

<p>A form consisting of a bunch of bare boxes would be useless, so how is
  the user to know what input box means what?  That's done with
  the <code>label</code> tag.  There are two ways the label can be
  used. One option is to wrap the input in the label:

<pre class="prettyprint lang-html">
&lt;label&gt;
  Given Name
  &lt;input type="text" name="givenname"&gt;
&lt;/label&gt;
&lt;label&gt;
  Family Name
  &lt;input type="text" name="familyname"&gt;
&lt;/label&gt;
</pre>  

<p>The other is to give the input an ID and reference that ID in
  a <code>for</code> attribute of the label:

<pre class="prettyprint lang-html">
&lt;label for="givenname"&gt;Given Name&lt;/label&gt;
&lt;input type="text" name="givenname" id="givenname"&gt;
&lt;label for="familyname"&gt;Family Name&lt;/label&gt;
&lt;input type="text" name="familyname" id="familyname"&gt;
</pre>  

<p>The latter is a bit more work, but is necessary in some cases where the
  structure of the HTML doesn't allow the input to be a child of the
  label, as with a table. 

<h2>Name and Value</h2>

<p>When the form gets <em>submitted</em>, the form data gets sent to the
  server. It gets sent as a set of name/value pairs, which we can think of
  as like a little table. Here's some data as if from our pizza form:</p>
    

<p><table class="bordercells" id="name_value_pairs">
    <tbody>
      <tr><th>name</th><th>value</th></tr>
      <tr><td>customer</td><td>Hermione</td></tr>
      <tr><td>phone</td><td>555-8888</td></tr>
      <tr><td>addr</td><td>hgranger@hogwarts.ac.uk</td></tr>
      <tr><td>size</td><td>large</td></tr>
      <tr><td>due</td><td>21:00</td></tr>
      <tr><td>instructions</td><td>please deliver by owl</td></tr>
      </tbody>
  </table>
</p>

<p>Since the fields of a form need to be processed both by Javascript code on the
  client-side (by the browser) and the scripts on the web server, it is
  necessary to use the different attributes of these elements to distinguish and
  access them.</p>  

<p>Consequently, the two most important attributes that we will use very
  frequently are <code>name</code> and <code>value</code>.</p>
          
    <ul>
      <li>The <code>name</code> attribute is used by Javascript to reference the HTML elements
      that use it, but most importantly is used by the server to distinguish between the different
      fields of the submitted form. We will discuss it again later when we talk about submitting
      the form to the server. In the meantime, it will be good practice to start using it everytime
      we create form fields.
      </li>

      <li>The <code>value</code> attribute is an attribute that can be
      either set explicitly in the HTML code to give an initial value to
      the elements, or will be set implicitly by the browser when the user
      enters a value in the field or selects some option (as from a
      menu). For example,
        <code>&lt;input type="text" value="Wellesley"&gt;</code> will show
        an initial value in the text field: <input type="text"
        value="Wellesley">, that can be overwritten by the user.</li>
    </ul>
          
<h2>Size of Text Inputs</h2>

<p>To control the width of the text input field, you don't use the attribute width, but the
  attribute <code>size</code>. For example, <code>&lt;input value="Wellesley" size="10"&gt;</code>
  will now be much smaller than in the example above: <input value="Wellesley" size="10">.</p>
          
<h2>Placeholder</h2>

<p>Another useful attribute for <code>input</code> controls is
  <code>placeholder</code>, which can be used to provide a hint for the
  kind of value that should go in a field.  For example, this
  HTML <code>&lt;input type="text" placeholder="Enter your
  name"&gt;</code> will be rendered like this: <input type="text"
  placeholder="Enter your name">.</p>
          
<h2 id="validation">Form Validation</h2>

<p>Later in the course, we'll talk about submitting the form data to a
server for more elaborate processing, but before we do that, we should
discuss <em>validation</em>.  What is form validation?  Essentially, it
means checking to see that the form has been filled out correctly (as far
as we can tell).

<p>Form validation could be used to ensure that someone hasn't overlooked
  a text input, menu or radio button group, and can check that, for
  example, the zip code is 5 digits (or 9) and that a telephone number is
  10 digits, and that an email address looks like an email
  address.

<p>Form validation can actually cancel the submission of the form, so that
the data never leaves browser.  The reason we validate forms is twofold:
to give the user immediate feedback that they've missed something, instead
of waiting for the server to respond, and to protect the server from
having to handle all those invalid forms.  Of course, a determined
nefarious person can simply disable our form validation JavaScript and
hammer our server with invalid forms, but that's rare. The vast majority
of invalid forms are just human error.

<p>Obviously, the browser can't tell whether you entered your correct
phone number, but it can check that you typed the right number of digits
(and only digits).  Similarly, it can't check that your spelled your name
correctly (and whether your name really is <q>Mickey Mouse</q>), but it
can check that you didn't leave that input blank.

<p>With HTML5 and modern web browsers, form validation has gotten a lot
easier.  In the past, web developers would write JavaScript code that
would look at the values in the form to check for bogus values.  They
wrote libraries and jQuery plug-ins to make the job easier for others.
Indeed, there is a jQuery plug-in by Jörn Zaefferer
called <a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/">validation</a>
that does a good job and is well described in our book, <em>JavaScript
&amp; jQuery: The Missing Manual</em>, pages 278-300.  Please read that,
and the on-line documentation linked above, if you're curious.

<p>However, the vast majority of form validation can be done with a few
  simple things:

  <ul>
    <li>Add the attribute <code>required</code> to any input that you want
    to require the user to fill out.
      
    <li>Use the fancy new form input types that HTML5 has added, such as:
      <ul>
        <li>tel, for telephone numbers
        <li>email, for email addresses
        <li>date, for just a date (year, month, day)
        <li>time, for time (hour, minute, seconds)
        <li>datetime, combining date and time inputs
        <li>and others
      </ul>
  </ul>

<p>Here's a demonstration.  (Note that I didn't re-use the input names
  from the earlier example because the JavaScript code above referred to
  the inputs by name, and so we need to make those unique.  I could also
  have used a nested selector and given each form its own ID.)

<pre class="prettyprint lang-html">
&lt;form action="/cgi-bin/dump.cgi"&gt;
  &lt;p&gt;Username: &lt;input required name="username"&gt;
  &lt;select required name="hogwarts_house"&gt;
    &lt;option value=""&gt;Hogwarts House&lt;/option&gt;   
    &lt;option&gt;Gryffindor&lt;/option&gt;
    &lt;option&gt;Hufflepuff&lt;/option&gt;
    &lt;option&gt;Ravenclaw&lt;/option&gt;
    &lt;option&gt;Slytherin&lt;/option&gt;
  &lt;/select&gt;
  &lt;p&gt;Email address: &lt;input required name="email" type="email"&gt;
  &lt;p&gt;Birthday: &lt;input required name="birthday" type="date"&gt;
  &lt;p&gt;&lt;input type="submit" value="submit form"&gt;
&lt;/form&gt;
</pre>  
  
<p>Here's the actual form, so you can change the values of inputs:

<div style="width:90%;margin:1em 5%;border:2px solid green;background-color:silver;">
<form action="/cgi-bin/dump.cgi">
  <p>Username: <input required name="username">
  <select required name="hogwarts_house">
    <option value="">Hogwarts House</option>   
    <option>Gryffindor</option>
    <option>Hufflepuff</option>
    <option>Ravenclaw</option>
    <option>Slytherin</option>
  </select>
  <p>Email address: <input required name="email" type="email">
  <p>Birthday: <input required name="birthday" type="date">
  <p><input type="submit" value="submit form">
</form>
</div>

<p>Try to submit an incomplete form!

<h2 class="line">Additional Material</h2>

<p>You can stop here. The following information is just for those
  interested in learning more.

<p>TBD

<div style="display:none">


<h2>Radio Buttons</h2>

<p>

<strong>Important:</strong> Radio and checkbox input items should all
      have the same name, so that they are considered as related. (Our
      radio buttons on the pizza form were all named <code>size</code>.) Without
      the same name, radio buttons will not be mutually exclusive.
<table class="table table-bordered table-striped">
  <thead>
    <tr>
      <th>Tag Name</th>
      <th>Rendered Tag</th>
      <th>
        More Info
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>&lt;input type=radio&gt; Small</code></td>
      <td><input type=radio> Small</td>
      <td class="text-center">
        <a href="http://www.w3schools.com/tags/tag_input.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
    <tr>
      <td><code>&lt;input type=checkbox&gt; Bacon</code></td>
      <td><input type=checkbox> Bacon</td>
      <td class="text-center">
        <a href="http://www.w3schools.com/tags/tag_input.asp" target="_blank">
          <span class="glyphicon glyphicon-info-sign"></a>
      </td>                  
    </tr>
  </tbody>
</table>

<h2>Checkboxes</h2>

<h2>Fieldset and Legend</h2>

<p>There are additional elements related to a form, that we saw in the example above, such as
          <code>label</code> and <code>legend</code>, who are used for accessibility, or 
          <code>fieldset</code> to group together elements in a form. By default, the browser will
          draw a box around all the elements in a fieldset (as we saw in the 
          <a href="unstyled_form.html">unstyled form</a>).</p>
                   
<h2>Access Keys</h2>

</div>

<script>
  // Copies the form code to a PRE element. Don't use jQuery in case it is not
  // loaded yet.
  document.getElementById("pizza-form-pre").innerText = document.getElementById("pizza-form").outerHTML;
</script>

