<!-- Mostly new presentation of DOM and jQuery, somewhat simplified.
     Scott D. Anderson
     October 2015
     -->

<p>This reading introduces the Document Object Model, or DOM, and a
widely-used JavaScript library
called <a href="https://www.jquery.com/">jQuery</a>. jQuery is used in
thousands of websites and is supported by Google, IBM and other tech
companies because it makes working with the DOM much easier and more
reliable.

<h2>Document Object Model</h2>

<p>Earlier in this course, we use HTML to structure our web pages and
  supply them content.  We used CSS to give them some style.  Then we
  introduced JavaScript, but the JavaScript barely seems to have anything
  to do with the HTML and CSS, other than running in the web browser.

<p>There's one exception, and that is code like the following:

<pre class="prettyprint lang-js">
document.querySelector("#fred").innerHTML = "I'm Fred";
</pre>

<p>The preceding JS code will actually modify the web page, changing the
  contents of the <code>#fred</code> element (the element whose id
  is <code>fred</code>), to contain the string "I'm Fred".

<p>The first part of the JS expression above, namely:

<pre class="prettyprint lang-js">
document.querySelector("#fred")
</pre>  

<p>returns an <em>object</em> that represents something in the web
  page. That thing could be a paragraph, a header, a div, or any
  other <em>element</em>.  The object has properties, such
  as <code>innerHTML</code>, and modifying that property modifies the web
  page. Thus, the web page is <em>dynamic</em>.

<p>To understand this better, let's review what we know about web pages.</p>

<h2 id="dom">The DOM</h2>    

<p>The Document Object Model (DOM) is the application programming
  interface (API) to represent and interact with an HTML document.</p>
    
<p>The DOM represents the HTML document as a tree of nodes. Every node
  represents a portion of the document.  Explore below an example of how a
  simple HTML file is represented by its DOM.</p>
    
<pre prettyprint lang-html>
&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;title&gt;My blog&lt;/title&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;script src="blog.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;My blog&lt;/h1&gt;
  &lt;div id="entry1"&gt;
    &lt;h2&gt;Great day bird watching&lt;/h2&gt;
    &lt;p&gt;
      Today I saw three ducks!
      I named them
      Huey, Louie, and Dewey.
    &lt;/p&gt;
    &lt;p&gt;
      I took a couple of photos ...
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
    
    <figure class="text-center">
      <img src="DOM-JQ-files/dom.png" width="800" class="img-thumbnail" alt="">
      <figcaption>Graphical representation of the DOM for the
      listed <a href="DOM-JQ-files/dom-example.html">HTML example</a>
      above. Image from the chapter of your reading.</figcaption>
    </figure>

    <div class="bs-callout bs-callout-danger">
     <h4>Important Note</h4>

     <p>The DOM represents both the structure and the content of the HTML
      page. All elements of the structure (i.e., tags) are represented by
      nodes surrounded with a border in the tree. In the Javascript
      representation they are all <strong>objects</strong>. The content of
      these objects is shown in the graphical representation without a
      border, and it's accessed by properties (such
      as <code>innerHTML</code>) of the objects that contain them. 
     </div>

<h2>DOM as a Bridge</h2>

<p>The DOM is a bridge between the HTML world of elements (paragraphs,
  lists, divs, and so on) and the JavaScript world of variables,
  functions, objects, and methods.  Every web browser has the DOM
  built-in, and the code we saw earlier is part of it:

<pre class="prettyprint lang-js">document.querySelector().innerHTML</pre>

<p>However, we will not be using the built-in DOM.  Instead, we will be
  using an add-on library
  called <a href="http://www.jquery.com">jQuery</a>.  We prefer jQuery for
  several reasons:
  <ul>
    <li>Consistency: Different browsers often build their DOM slightly
      differently, and jQuery hides those differences. It will translate
      our jQuery code into whatever works in the user's browser.
      
    <li>Brevity: jQuery code is wonderfully concise, and so everything is
    much easier to accomplish. 

    <li>Power:  there are a few things that jQuery does that are so
    powerful that, while you <em>could</em> implement them in the native
    DOM, in practice you wouldn't.

  </ul>

<p>Let's start with an example of jQuery's conciseness. The following two
  lines of code are equivalent:

<pre class="prettyprint lang-js">
document.querySelector("#fred").innerHTML = "I'm Fred";
$("#fred").html("I'm Fred");
</pre>

<p>The latter, of course, is jQuery, the topic that we turn to now. If you
  want to learn a bit more about the DOM, the following answers the
  question <a href="https://css-tricks.com/dom/">What is the DOM?</a> in a
  brief page consisting of four big pictures and a small amount of text.</p>

<h2 id="basics">jQuery Basics</h2>
        
<p>jQuery is a library written in Javascript that is specialized for
changing web documents on the fly. It is one of the most used libraries on
the web.  However, because it's not built-in to the browser, it has to be
loaded.  If you don't load jQuery, none of these examples will work. 
</p>

<h2>Load jQuery</h2>

<p>In order to use jQuery in a webpage, we need to include it with
  the <code>&lt;script&gt;</code> tag. The library itself is a big
  Javascript file with hundreds of lines of code. We can either download
  this file from the <a href="http://jquery.com/download/">jQuery
  website</a>, or we can use an absolute URL to some web server that keeps
  a copy of the library online.  For simplicity, we will do the
  latter. Here is how we will include jQuery in our programs:
        
<pre class="prettyprint lang-html">
&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"&gt;&lt;/script&gt;
</pre>
        
<p>As of this lecture, the most current version of jQuery is 2.2.1, but
  1.11.0 will do. (The main difference between the 2.x and 1.x versions is
  whether older browsers like IE 6/7/8 are supported.) In your reading or
  examples from the Web, you will notice other version
  numbers. The <code>.min</code> part of the filename
  means <em>mininfied</em>. This refers to the practice of deleting all
  newlines and other space to reduce file size. If you open this file,
  you'll notice that it doesn't show the structure of a normal Javascript
  program with indentation and nesting. Thus, it is not for human
  consumption. However, it does load faster, because the file is
  smaller.</p>
      
        
<h2>jQuery wrapper</h2>

<p>Once we have the jQuery library linked to our page, we can start using
  its main method, the <em>jQuery Wrapper</em>. This is a function that
  has two forms:
</p>

<pre class="prettyprint lang-js">
$()   // Short form is common

jQuery()  // Long form is rare
</pre>
        
<p>In practice, the dollar sign is used almost always. The long form is
  only used in a few odd cases when your page is loading several
  libraries, both of which use the dollar sign.  In this course, you will
  always use the dollar sign.

<p>As we said earlier, jQuery is a bridge to the web page, so most of what
  we will be using it for is to dynamically modify the web page, or to
  attach behaviors to it. Here are some of the things we might want to do:
<ul>
  <li>Modify the HTML inside an element
    
  <li>Modify the CSS of an element or other attributes of it.
    
  <li>Add new elements to the page
    
  <li>Remove elements from the page
    
  <li>Hide/show elements on the page
</ul>

<p>We'll see most of those today. In later readings, we'll see even more
that jQuery can do.

<h2>Syntax</h2>

<p>Code using jQuery has a very nice, consistent, concise syntax, so let's
  take a minute to learn that syntax using an example we already
  understand, namely modifying the HTML in an element.

<p>Our example uses a element created by the following HTML/CSS code that
creates an empty, green-bordered box on the page, whose ID
is <code>pandora</code>.

<pre>
&lt;div id="pandora"&gt;This is Pandora's box&lt;/div&gt;
&lt;style&gt;
  #pandora {
      width: 80%;
      margin: 0 auto;
      border: 2px solid green;
      padding: 5px;
  }
&lt;style&gt;
</pre>

<div id="pandora" style="width: 80%; margin: 0 auto; border: 2px solid green; padding: 5px">This is Pandora's box</div>

<p>Suppose we wanted to put some text dynamically into Pandora's box
(replacing what is there). The following lines of JavaScript/jQuery do the
trick.

<form action="">
<div>
<textarea rows=4>
var contents = prompt("What to put in Pandora's box?", "all evils");
console.log("putting "+contents+" into Pandora's box");
$('#pandora').html(contents);
</textarea><br>
<input type=button name=Button value="Execute It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<p>Try putting <q>hope</q> into the box instead.

<p>Let's try to understand this example of jQuery code.  (Remember, jQuery
is an extension of JavaScript, not a whole different language, but it can
seem like a different language at times.)  Here it is again:

<pre class="prettyprint lang-js">
var contents = prompt("What to put in Pandora's box?", "all evils");
console.log("putting "+contents+" into Pandora's box");
$('#pandora').html(contents);
</pre>

<p>The first two lines of code are things we have seen
before: <code>prompt()</code> gets a string from the user and the first
statement stores that string in a variable
called <code>contents</code>. The second line glues a few strings together
(some of which are string <em>literals</em> and one of which is in
the <code>contents</code> variable) and then writes the combined string
onto the console log.

<p>The third line puts the string into the box, using a jQuery
incantation:

<pre>
$(<span style="color:red">'#pandora'</span>).<span style="color:green">html</span>(<span style="color:blue">contents</span>);
</pre>

<p>How does the incantation work?  There are basically three things going
on here:
  
<pre>
$(<span style="color:red">selector</span>).<span style="color:green">method</span>(<span style="color:blue">stuff</span>);
</pre>

<ul>
  <li><span style="color:red">selector</span> This is a string
  that <em>selects</em> an element or set of elements within the
  document. We can then do something to all of those elements.  jQuery
  uses the same ways of selecting elements that CSS does.  In this case,
  it is choosing exactly one, unique element, the one whose id
  is <code>pandora</code>.  Hence it uses <code>#pandora</code>, exactly
  like the CSS does. Thus, all your skills with selecting elements using
  CSS will serve you well when using jQuery.
    
  <li><span style="color:green">method</span> The word after the parens
  and the dot names one of the built-in jQuery methods.  Here, we used the
  the <span style="color:green">html</span> method, which replaces the
  contents of an element with some string. Using the <code>.html()</code>
  method replaces the contents of all the elements that were chosen by the
  selector (in this case, just one).

  <li><span style="color:blue">stuff</span> This is the stuff that we want
    to replace the contents of the selected elements.  In this example, we
    replaced it with the string that the user gave us in the first
    line. In general, the method may take additional arguments, and they
    are listed here.
</ul>

<p>So, in summary, we used jQuery to find the div and insert the user's
input into it.  What we haven't shown you is how to trigger this behavior
in a more elegant way than one of these execution boxes.  That will have
to wait for a later lecture.  Be patient. For now, though, we'll
demonstrate some of the abilities that JQ has to dynamically alter a web
page. We won't go into great detail in any of them; we just want to give
you the basic idea.

<h2>The html() Method</h2>

<p>As we've seen, the <code>html</code> method modifies the contents of
  the page. It doesn't have to take just text; in general, it can take any
  HTML. (To learn all there is about it, read the documentation for
  the <a href="http://api.jquery.com/html/">html</a> method.) Here's
  another example, using a list.

<style scoped>
  .demo_elt { 
      width: 80%;
      margin: 0 auto;
      border: 2px solid green;
      padding: 5px;
  }
</style>

<pre>
&lt;ol id="horcruxes"&gt;&lt;li&gt;currently empty&lt;/li&gt;&lt;/ol&gt;
</pre>

<ol class="demo_elt" id="horcruxes"><li>currently empty</li></ol>

<p>Let's replace that with some other HTML

<form action="">
<div>
<textarea rows=4>
var items = prompt("Horcruxes", "<li>the diary</li><li>the locket</li>");
$('#horcruxes').html(items);
</textarea><br>
<input type=button name=Button value="Execute It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<h2>Modifying Attributes</h2>

<p>jQuery has several ways to modify the attributes of an existing
elements. Let's start with changing the CSS of a figure:

<pre class="prettyprint lang-html">
&lt;figure id="fig1"&gt;
  &lt;img id="img1" src="potterpics/harry-potter-thumb.jpeg" alt="Harry Potter"&gt;
  &lt;figcaption id="cap1"&gt;Harry Potter as played by Daniel Radcliffe&lt;/figcaption&gt;
&lt;/figure&gt;
</pre>
  
<figure id="fig1">
  <img src="potterpics/harry-potter-thumb.jpeg" alt="Harry Potter">
  <figcaption>Fig1: Harry Potter as played by Daniel Radcliffe</figcaption>
</figure>

<p>We could change the CSS by adding a border, centering, a
background-color and some padding. Click the button to implement these
changes. Notice the descendant selectors we use for the caption.

<form action="">
<div>
<textarea rows=6>
$("#fig1").css("border","2px solid red");
$("#fig1").css("text-align","center");
$("#fig1").css("padding","10px");
$("#fig1 figcaption").css("background-color","gold");
</textarea><br>
<input type=button name=Button value="Execute It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<p>The <code>.css()</code> method takes two arguments, a property and a
value, just like static CSS. It works exactly like inline CSS. Try
inspecting the figure and figcaption elements above; you'll see that they
have had inline CSS attributes added to them.  (However, this is not a bad
use of inline CSS, because the CSS is not mixed with the static HTML code;
it's being dynamically specified.)

<p>There are other attributes we could change, such as the SRC and ALT for
the image here:

<pre class="prettyprint lang-html">
&lt;figure id="fig2"&gt;
  &lt;img src="potterpics/hermione-granger-thumb.jpeg" alt="Hermione Granger"&gt;
  &lt;figcaption&gt;Hermione Granger as played by Emma Watson&lt;/figcaption&gt;
&lt;/figure&gt;
</pre>
  
<figure id="fig2">
  <img src="potterpics/hermione-granger-thumb.jpeg" alt="Hermione Granger">
  <figcaption>Fig2: Hermione Granger as played by Emma Watson</figcaption>
</figure>

<p>The attributes above can be changed using jQuery's <code>attr()</code>
method. Watch what we can do with it; it's like magic!

<form action="">
<div>
<textarea rows=4>
$("#fig2 img").attr("src","potterpics/ron-weasley-thumb.jpeg");
$("#fig2 img").attr("alt","Ron Weasley");
$("#fig2 figcaption").html("Ron Weasley as played by Rupert Grint");
</textarea><br>
<input type=button name=Button value="Execute It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>


<h2>Hide/Show Elements</h2>
  
<p>If you want to make something disappear, you could modify its CSS to
have the property <code>display:none</code>. You could undo that change to
make it re-appear.  This is so common that jQuery has special
methods, <code>.hide()</code> and <code>show()</code>.  Here's our figure
again, this time as <code>fig3</code>:

<figure id="fig3">
  <img src="potterpics/hermione-granger-thumb.jpeg" alt="Hermione Granger">
  <figcaption>Fig3: Hermione Granger as played by Emma Watson</figcaption>
</figure>

<table><tbody><tr>
      <td>
<form action="">
<div>
<textarea rows=2>
$("#fig3").hide();
</textarea><br>
<input type=button name=Button value="Hide It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>
</td>
      <td>
<form action="">
<div>
<textarea rows=2>
$("#fig3").show();
</textarea><br>
<input type=button name=Button value="Show It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>
</td>
</tr></tbody></table>

<p>We could describe more methods, but hopefully you are seeing the
pattern: select an element and operate on it using a method. So, let's
turn to some slightly different tricks jQuery has up its sleeve.</p>

<h2>Wrapped Sets</h2>

<p>So far, we've always seen the <em>selector</em> part of the jQuery
expression pick out just a single element. However, jQuery is more general
and powerful than that. In most cases, if the selector matches more than
one element on the page, jQuery operates on <em>all</em> of the elements
in one fell swoop. Here's an example:

<pre class="prettyprint lang-html">
&lt;ol id="characters1"&gt;
  &lt;li class="gryffindor"&gt;Harry&lt;/li&gt;
  &lt;li class="gryffindor"&gt;Ron&lt;/li&gt;
  &lt;li class="gryffindor"&gt;Hermione&lt;/li&gt;
  &lt;li class="gryffindor"&gt;Fred&lt;/li&gt;
  &lt;li class="gryffindor"&gt;George&lt;/li&gt;
  &lt;li class="ravenclaw"&gt;Cho&lt;/li&gt;
  &lt;li class="hufflepuff"&gt;Cedric&lt;/li&gt;
  &lt;li class="slytherin"&gt;Draco&lt;/li&gt;
  &lt;li class="slytherin"&gt;Crabbe&lt;/li&gt;
  &lt;li class="slytherin"&gt;Goyle&lt;/li&gt;
&lt;/ol&gt;
</pre>

<ol id="characters1">
  <li class="gryffindor">Harry</li>
  <li class="gryffindor">Ron</li>
  <li class="gryffindor">Hermione</li>
  <li class="gryffindor">Fred</li>
  <li class="gryffindor">George</li>
  <li class="ravenclaw">Cho</li>
  <li class="hufflepuff">Cedric</li>
  <li class="slytherin">Draco</li>
  <li class="slytherin">Crabbe</li>
  <li class="slytherin">Goyle</li>
</ol>

<form action="">
<div>
<textarea rows=4>
$("#characters1 li").css("font-size","18px");   // matches 10 elts
$("#characters1 .gryffindor").css("color","red");  // matches 5 elts
$("#characters1 .slytherin").hide();    // matches 3 elts
</textarea><br>
<input type=button name=Button value="Execute It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<h2>Method Chaining</h2>

<p>The jQuery wrapper function always returns the set of elements it
matches, so you can operate on it again, if you like.  Knowing that the
jQuery wrapper always returns something is very useful for
  <a href="http://www.w3schools.com/jquery/jquery_chaining.asp">chaining
    jQuery methods</a>. This is done to avoid storing results in temporary
    variables, or repeating a search for set of matches. So, some of our
    examples above could be even more concise:

<figure id="fig4">
  <img src="potterpics/harry-potter-thumb.jpeg" alt="Harry Potter">
  <figcaption>Fig4: Harry Potter as played by Daniel Radcliffe</figcaption>
</figure>

<p>We could change the CSS by adding a border, centering, a
background-color and some padding. Click the button to implement these
changes. 

<form action="">
<div>
<textarea rows=5>
$("#fig4")
    .css("border","2px solid red")
    .css("text-align","center")
    .css("padding","10px");
</textarea><br>
<input type=button name=Button value="Execute It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<p>This is not only less to type, it's easier to understand and it's
faster to execute, because it now finds the element once and does a series
of operations on it.

<p>Note, though, that we also omit the semi-colon on all the lines except
the last. The semi-colon breaks the chain of method calls.

<p>Let's turn to a more advanced case of chaining, along with some other
cool tricks that jQuery can do, namely
  <ol>
    <li>Creating elements, which you can do by putting HTML code (with
    angle brackets) in the selector. Such an element is not (yet) attached
    to the web page. You can think of it as being <q>off stage</q>.
      
    <li>Modifying the created, unattached element.
      
    <li>Attaching the element to the web page.
  </ol>

<p>Let's see it in action on this list, repeated from above, but now with
the ID <code>characters2</code>

<ol id="characters2">
  <li class="gryffindor">Harry</li>
  <li class="gryffindor">Ron</li>
  <li class="gryffindor">Hermione</li>
  <li class="gryffindor">Fred</li>
  <li class="gryffindor">George</li>
  <li class="ravenclaw">Cho</li>
  <li class="hufflepuff">Cedric</li>
  <li class="slytherin">Draco</li>
  <li class="slytherin">Crabbe</li>
  <li class="slytherin">Goyle</li>
</ol>

<form action="">
<div>
<textarea rows=6>
$("<li>")
    .html("Percy")
    .addClass("gryffindor")
    .css("text-decoration","line-through")
    .appendTo("#characters2");
</textarea><br>
<input type=button name=Button value="Execute It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<p>The code above creates a new empty list item, sets its contents to
Percy, adds the Gryffindor class to give it the correct styling, adds some
addition CSS to strike him out (since he's such a git), and finally
attaches it to the page at the end of the element whose ID
is <code>characters2</code> (our list).

<p>You don't have to use the chaining technique if you don't want to, but
  it can be very clear to read (once you are used to it) and it is
  commonly used in online tutorials and examples. We will use it whenever
  it's convenient.</p>
        
<h2>A Pitfall</h2>

<p>Common practice for many years has been to put JS code in the HEAD of a
web page, but that lays a trap for us.  If we write some JQ code to find
an element and do something to it, as we've done many times in this
reading, but the HTML for that element is further down on the page, the
element <em>will not exist</em> when the JQ code runs.  Here's an example:

<pre class="prettyprint lang-js linenumbers executable">
&lt;head&gt;
   &lt;!-- load jQuery --&gt;
   &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"&gt;&lt;/script&gt;
  &lt;script&gt;
    var d = new Date();
    $("h1").html("News for "+d.toLocaleDateString());  // insert date into H1
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;News for Today&lt;/h1&gt;  &lt;!-- replaced by today's date --&gt;
  ...
</pre>

<p>Our intention is pretty clear: find the H1 and insert today's date in
it. However, when the JavaScript/jQuery code runs, the H1 does not yet
exist, so it won't get filled in with today's date.

<p>Even worse, we won't get an error message! jQuery successfully matched
a set of elements; it just happened to be the <em>empty set</em>, which is
fine by jQuery, if not for us.

<h2>Is the DOM ready?</h2>

<p>The pitfall we just described leads to the important question of when
  our jQuery code should be executed. Putting the code in different parts
  of the HTML file might have different effects on the page, based on when
  the browser reads and interprets the code. This is why, normally, the
  jQuery code should be executed only after the DOM has been created and
  is ready for dynamic manipulation.</p>

<p>Most examples you'll see in the provided reading, will show code
  usually wrapped in a big event handler for the <code>document</code>
  object, as shown below:</p>
        
<pre class="prettyprint lang-js linenumbers">
$(document).ready(function(){

  // all other jQuery code goes here

});
</pre>
        
<p>For example, the date insertion we did above would be done like this:

<pre class="prettyprint lang-js">
&lt;head&gt;
   <!-- load jQuery -->
   &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"&gt;&lt;/script&gt;
  &lt;script&gt;
   $(document).ready(function () {
      var d = new Date();
      $("h1").html("News for "+d.toLocaleDateString());
   });
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;News for Today&lt;/h1&gt;
  ...

</pre>  

<p>This works correctly, but is complex to understand. It uses the jQuery
wrapper function with the special <code>document</code> object and the
result gets the <code>ready()</code> method is triggered when the DOM is
ready), and to this method it passes as an argument an anonymous function.
It's also a syntactic nightmare: notice that the final line
is <code>});</code>.</p>

<p>Another way to make sure that the DOM is ready is to put the JavaScript
code at the very end of the page (right before <code>&lt;/body&gt;</code>
instead of in the head. This way, we know that the previous HTML lines
have been already processed by the browser and the DOM is ready. In other
words, the following code would also work for putting today's date in the
H1 element, and is simpler and easier to understand:

<pre class="prettyprint lang-js linenumbers executable">
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;News for Today&lt;/h1&gt;
  ...
   <!-- load jQuery -->
   &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"&gt;&lt;/script&gt;
  &lt;script&gt;
    var d = new Date();
    $("h1").html("News for "+d.toLocaleDateString());
  &lt;/script&gt;
&lt;/body&gt;
</pre>

<p>In this class, we'll load jQuery and put our code at the end of the
file, when the DOM has been built and is ready.

<div class="alert alert-warning">
   <h4>Avoiding <code>$(document).ready(function(){..});</code></h4> 
   <p>We taught you about <code>$(document).ready()</code> not because we
   will use it in this course, but because it is extremely common in
   examples and tutorials about jQuery on the web. We want you to be able
   to understand those.
</div>

<p>We'll learn more about jQuery this semester. If you can't wait, there
are many good tutorials online. One place to start
is <a href="http://www.w3schools.com/jquery/default.asp">W3Schools jQuery
Tutorial</a>.

<h2 id="load">Loading Code From Another File</h2>

<p>jQuery can help us with a common pitfall in larger websites: the
    problem of copied code.  For example, suppose every web page of a
    10-page website (like your CS 110 project sites) has the same
    navigation bar.  So, all 10 pages have the same HTML, something like
    the following (assume there's also some nice CSS to lay out the links
    and make them look pretty).

<div id="nav-ex"><nav>
    <ul>
        <li><a href="home.html">home</a></li>
        <li><a href="about.html">about</a></li>
        <li><a href="members.html">members</a></li>
        <li><a href="joining.html">joining</a></li>
        <li><a href="events.html">events</a></li>
    </ul>
</nav>
</div>

<pre id="nav-ex-src" class="prettyprint lang-html linenums"></pre>

<script>
document.getElementById('nav-ex-src').textContent = document.getElementById('nav-ex').innerHTML;
</script>

<p>The obvious thing to do is to copy/paste those lines to each of the 10
    pages of your site. That works fine, but if the boss decides to change
    the nav content (say, adding another link), you'll have to edit all 10
    pages of the site.  Note that if the boss just wanted to change the
    CSS, you'd be able to just change the shared CSS file. Having things
    just written once is a big advantage.

<p>Using jQuery, we can mitigate this problem. We can put the master copy
    of the nav on the home page, and use jQuery to dynamically copy that
    content to the other pages. The other pages have an empty element
    where the nav will be copied to:

<pre class="prettyprint lang-html">
    &lt;div id="nav-goes-here"&gt;&lt;/div&gt;
</pre>
    
<p>Then, they have some jQuery code that looks like this:
<pre class="prettyprint lang-js linenums">
$("#nav-goes-here").load("home.html nav");
</pre>    
    
<p>That incantation dynamically loads <code>home.html</code> into memory,
    pulls out the <code>&lt;nav&gt;</code> element and inserts it into the
    element whose ID is <code>#nav-goes-here</code>.
        
 <h2 class="line">Additional Material</h2>

 <p>You can stop here if you like. The following is for the interested reader.

<p>Suppose we had some <em>class</em> definitions that we wanted to use:

<pre class="prettyprint lang-css">
.gryffindor { border: 2px solid red; background-color: gold; }
.slytherin  { border: 2px solid green; background-color: silver; }
.hufflepuff { border: 2px solid black; background-color: yellow; }
.ravenclaw  { border: 2px solid blue;  background-color: bronze; }
</pre>  

<style scoped>
.gryffindor { border: 2px solid red; background-color: gold; }
.slytherin  { border: 2px solid green; background-color: silver; }
.hufflepuff { border: 2px solid black; background-color: yellow; }
.ravenclaw  { border: 2px solid blue;  background-color: bronze; }
</style>  

<figure id="fig2a">
  <img src="potterpics/hermione-granger-thumb.jpeg" alt="Hermione Granger">
  <figcaption>Hermione Granger as played by Emma Watson</figcaption>
</figure>

<p>Here's the source code for the figure above:

<pre class="prettyprint lang-html">
&lt;figure id="fig2a"&gt;
  &lt;img src="potterpics/hermione-granger-thumb.jpeg" alt="Hermione Granger"&gt;
  &lt;figcaption&gt;Hermione Granger as played by Emma Watson&lt;/figcaption&gt;
&lt;/figure&gt;
</pre>
  
<form action="">
<div>
<textarea rows=3>
$("#fig2a").removeClass("gryffindor");
$("#fig2a").addClass("slytherin");
</textarea><br>
<input type=button name=Button value="Execute It" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<p>Click the button to change the figure to use Slytherin's colors. Try
changing the code and clicking again to change to Gryffindor's colors.


<h2>Append Elements</h2>

<p>TBD

<h2>Remove Elements</h2>
   
<p>TBD

<h2 id="methods">Some jQuery Methods</h2>

        <p>Here is a list of jQuery methods used in our interactive example or in the 
        <a href="../../assignments/a07/">assignment for this week.</a></p>
        <ul>
          <li>.ready()</li>
          <li>.append()</li>
          <li>.appendTo()</li>
          <li>.click()</li>
          <li>.show()</li>
          <li>.hide()</li>
          <li>.html()</li>
          <li>.text()</li>
          <li>.attr()</li>
          <li>.val() // for input fields</li>
          <li>.parent()</li>
          <li>.clone()</li>
          <li>.addClass()</li>
          <li>.removeClass()</li>
          <li>.find()</li>
</li>
        </ul>
        <p>To see more examples and explanations for these methods, you should consult the 
        <a href="http://api.jquery.com/">jQuery API documentation</a>.</p>
        
