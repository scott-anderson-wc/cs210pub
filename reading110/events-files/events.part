<!-- Scott Anderson, October 2015. Mostly new, but with recycling of older
content. -->

<style scoped>
  form.demo {
      width: 80%;
      border: 2px solid teal;
      padding: 3ex 2em;
  }
</style>

<h2>Events</h2>

<p>Our websites have so far been pretty passive:  they present material
  for the user to read or look at, but nothing more interactive. Now that
  we know about forms, our code can process input from the user and
  dynamically modify the page. We just need a few more concepts to make a
  page that is interactive:
  <ul>
    <li>Events: these are things the user does, such as clicking on
      something or submitting a form.
      
    <li>Event Handlers: these are functions that we define and that the
      browser will invoke when a particular event occurs.
      
    <li>Getting values out of forms when we want to know what the user
      entered.
</ul>

<p>Let's start with the last item.

<h2>Getting Form Values</h2>

<p>jQuery has a convenient method for retrieving the value of an input,
  the <code>.val()</code> method.  The selector should be anything that
  selects the input, such as its id.  Here's a form with three inputs:

  <form class="demo" id="pizza-form">
  <p><label>Customer name: <input id="customer1" name="customer"></label></p>
  <p><label>Size:
      <select id="pizza_kind1" name="kind">
        <option value="">choose kind</option>
        <option value="cheese">cheese</option>
        <option value="veggie">veggie</option>
        <option value="carnivore">carnivore</option>
      </select>
    </label>
  <p><label>number of slices:
      <input type="number" min="1" max="10"
             id="num_slices1"
             name="num_slices">
    </label>
  </form>

<p>The IDs of the three inputs
  are <code>customer1</code>, <code>pizza_kind1</code>,
  and <code>num_slices1</code>.

<p>Fill out the form and use the following execution box to retrieve the
  values:

<form action="">
<div>
<textarea rows=5>
var cust = $("#customer1").val();
var kind = $("#pizza_kind1").val();
var num = $("#num_slices1").val();
alert("customer is "+cust+", kind is "+kind+" and num is "+num);
</textarea><br>
<input type=button value="Execute it" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<p>The <code>.val()</code> method works just like other jQuery methods:
  the wrapper function selects the element you want to operate on, and the
  method does the work.  Here, it pulls the <code>value</code> out of the
  input.

<p>Note that values from forms are <em>always</em> strings, even if the
  form says that the input is type <code>number</code>.  If you want it to
  be a number, you have to use <code>parseInt</code>
  or <code>parseFloat</code>, just as we did with values returned
  by <code>prompt</code>.

<p>Now that we know how to use forms, we'll never need <code>prompt</code>
again.

<h2>Units Conversion</h2>

<p>Let's build a slightly useful form: one that will allow the user to do
  metric conversions. They will enter a number of pounds, and the form
  will compute the conversion to kilograms.  (One kilogram is 2.2 pounds.)

<p>We'll define two functions to do the work:
  <ul>
    <li><code>pounds2kilograms</code>, which takes an argument of pounds
      (a number) and converts it to kilograms, returning the number of
      kilograms.  This is a generic function that might be useful in a
      wide variety of problems.
    <li><code>doConversion</code>, which pulls the numberof pounds out of
      the form, converts it to a number, invokes the first function to get
      the number of kilograms, and then inserts the answer, formatted with
      1 decimal place, into the span above.
  </ul>

<p>Here's the source code for the form we will use:

<pre class="prettyprint lang-html">
&lt;form&gt;
  &lt;p&gt;&lt;label for="pounds1"&gt;Pounds&lt;/label&gt;
    &lt;input type="text" name="pounds" id="pounds1"&gt;
  &lt;p&gt;&lt;button type="button" id="convert1"&gt;Convert&lt;/button&gt;
  &lt;p&gt;&lt;span id="kg1"&gt;&lt;/span&gt; kilograms&lt;/p&gt;
&lt;/form&gt;
</pre>  
      

<p>Here's the live form. The button doesn't do anything yet.
  
<form class="demo">
  <p><label for="pounds1">Pounds</label>
    <input type="text" name="pounds" id="pounds1">
  <p><button type="button" id="convert1">Convert</button>
  <p><span id="kg1"></span> kilograms</p>
</form>

<p>Here's the code to execute:

<form action="">
<div>
<textarea rows=12>
function pounds2kilograms(pounds) {
    return pounds / 2.2;
}

function doConversion() {
    var lbs = parseFloat( $("#pounds1").val() );
    var kgs = pounds2kilograms(lbs);
    $("#kg1").html( kgs.toFixed(1) );
}

doConversion();
</textarea><br>
<input type=button value="Execute it" 
       onclick="eval(this.parentNode.firstElementChild.value)">
</div>
</form>

<p>At this point, we <em>almost</em> have a working form. What we need is
  to set things up so that instead of the execution box invoking
  the <code>doConversion</code> function, the user can cause it be be
  invoked by clicking on the button.

<p>To re-phrase that in the terminology of this reading, we want
  the <code>doConversion</code> function to be an <em>event handler</em>
  for the <em>event</em> of the user clicking on the button.

<p>jQuery has a convenient method of attaching a function to some element
  in the document so that the function gets invoked when the element is
  clicked on. That method is the <code>.click()</code> method.  Here's how
  we will do it:

<pre class="prettyprint lang-js">
$("#convert1").click(doConversion);
</pre>  
   
<p>Notice, by the way, the lack of a pair of empty parentheses after the
  function name, <code>doConversion</code>. That's because we are not
  invoking the function here. Instead, we are handing it to jQuery to be
  attached to the web page as an event handler. To use our earlier
  metaphor, we are passing the function as a machine, like a blender or
  meat grinder, for someone else to use, but we are not pressing
  the <q>on</q> button right here.

<p>Here's our revised code:

<pre id="convert_dst" class="prettyprint lang-js linenumbers"></pre>

<p>Let's see the code in action. Here's a duplicate form, but now the IDs
  end in 2 instead of 1:

<form id="form_lb2kg" class="demo">
  <p><label for="pounds2">Pounds</label>
    <input type="text" name="pounds" id="pounds2">
  <p><button type="button" id="convert2">Convert</button>
  <p><span id="kg2"></span> kilograms</p>
</form>

<script id="convert_src">
function pounds2kilograms(pounds) {
    return pounds / 2.2;
}

function doConversion() {
    var lbs = parseFloat( $("#pounds2").val() );
    var kgs = pounds2kilograms(lbs);
    $("#kg2").html( kgs.toFixed(1) );
}

$("#convert2").click(doConversion);
</script>

<script>
document.getElementById("convert_dst").innerText = document.getElementById("convert_src").innerText;
</script>



<p>Go ahead and try the form!

<h2>Events and Event Handlers</h2>

<p>The preceding section showed a particular example of a <em>event
    handler</em> (the <code>doConversion</code> function). It will be
    invoked to handle a "click" event on that particular button.  Let's
    step back and discuss more generally what these things are.

<p>An <em>event</em> is something that happens in the browser, often
  initiated by the user, but not always. Some examples:
  <ul>
    <li>an element is clicked on</li>
    <li>an element is moused over</li>
    <li>the HTML is loaded and the DOM is ready (we saw this in the
    reading on the DOM)</li>
    <li>some data finishes loading from the server</li>
    <li>a timer has expired</li>
    <li>some keys are pressed on the keyboard</li>
  </ul>

<p>There are others, but these are more than enough for our purposes.

<p>An <em>event handler</em> is just a function that will be invoked when
  a particular event occurs. In other words, it's not a special kind of
  function, it's a particular <em>use</em> for a function. That said, for
  our purposes, an event handler will be a function that takes no
  arguments and returns no values, because that's how it will be
  invoked. (That's not strictly true, but it is close enough for now.)

<h2>Hide and Show</h2>

<p>Our forms don't have to have lots of inputs; they can consist of just a
  button or two. Here is a form with just two buttons. Try them, and watch
  the picture below!

<form>
  <button type="button" id="hide1">hide</button>
  <button type="button" id="show1">show</button>
</form>

<figure id="fig1">
  <img src="potterpics/harry-potter-thumb.jpeg" alt="Harry Potter">
  <figcaption>Fig1: Harry Potter</figcaption>
</figure>


<script>
function hideFigure1() {
    $("#fig1").hide();
}

function showFigure1() {
    $("#fig1").show();
}

$("#hide1").click(hideFigure1);
$("#show1").click(showFigure1);
</script>

<p>Here's the code. You'll notice that there are two simple functions that
  hide/show the element whose ID is <code>fig1</code>.  You're welcome to
  try them from the JS console; there's nothing special about them. Then,
  we have two lines of JQ that attach those functions to the two buttons.
  
<pre class="prettyprint lang-js">
function hideFigure1() {
    $("#fig1").hide();
}

function showFigure1() {
    $("#fig1").show();
}

$("#hide1").click(hideFigure1);
$("#show1").click(showFigure1);
</pre>
  
<h2>The <code>this</code> Object</h2>

<p>Suppose we had a long list of items, and we want to allow the user to
  click on any one of them to make them disappear. Here's an example of
  the behavior we want:
  
<ol id="char_list">
  <li>Harry</li>
  <li>Ron</li>
  <li>Hermione</li>
  <li>Neville</li>
  <li>Luna</li>
  <li>Ginny</li>
  <li>Draco</li>
  <li>Crabbe</li>
  <li>Goyle</li>
  <li>Cho</li>
  <li>Cedric</li>
</ol>

<p>Clearly, we could give each of these 11 items a different ID, we could
define 11 functions that are all pretty much the same except for the ID of
  the thing they are hiding, and attach each function to one list
  item. Something like this. I've written the functions on one line both
  for brevity and to make it easier to compare their code.

<pre class="prettyprint lang-js">
function hideItem1() { $("#elt1").hide(); }
function hideItem2() { $("#elt2").hide(); }
function hideItem3() { $("#elt3").hide(); }
...

$("#elt1").click(hideItem1);
$("#elt2").click(hideItem2);
$("#elt3").click(hideItem3);
...
</pre>  

<p>Code like that is tedious and boring, and it doesn't scale well. If we
  had a list of the 50 states in the US, or 196 countries in the world,
  the code is excessively tedious and boring. There must be a better way,
  and there is.

<p>The idea is to attach the <em>same</em> function to each item in the
  list, so we only have to define one function.  The function, however,
  has to figure out <em>which</em> item to hide. In this case, the answer
  is <em>the one that was clicked on</em>.

<p>Any time an element is clicked on, the special
  variable <code>this</code> contains the element.  So, in the example
  above, if you click on the first element in the list (Harry),
  the <code>hideItems1</code> function runs, but <code>this</code>
  contains that LI.  Similarly for all the others.

<p>Here's our revised code:
<pre class="prettyprint lang-js">
function hideItem() { $(this).hide(); }

$("#char_list li").click(hideItem);
</pre>  

<script>
function hideItem() { $(this).hide(); }

$("#char_list li").click(hideItem);
</script>

<p>Try it!</p>

<p>One important part of the code is the selector, <code>"#char_list
    li"</code>, which matches all 11 LI elements in that list in one, easy
    but powerful bit of code.

<p>The key piece of code, of course, is the following:

<pre class="prettyprint lang-js">
$(this).hide();
</pre>  

<p>That code uses <code>this</code> as the selector, taking that element
  on the page and wrapping it up with all the jQuery methods, including
  the <code>.hide()</code> method. Before, we've always seen the selector
  contain a string literal, describing the element or elements to be
  operated on. Here, we have, essentially, a magic variable whose value is
  just the thing we want.  

<p>The technique of using the <code>this</code> variable is fairly complex
  and advanced, and we won't need it often, but it's good to know about.

