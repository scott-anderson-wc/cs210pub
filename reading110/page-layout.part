
<!-- This lecture was written from scratch on Feb 2014 by Eni.-->

<div class="alert alert-info">
  <p>We strongly recommend that you read Chapter 11 of the 
    <a href="http://shop.oreilly.com/product/9780596159924.do">Head First HTML and CSS</a> book 
    as a gentle explanation for this topic. The material in these notes comes 
    from Chapters 11, 12, 13 of the book 
    <a href="http://shop.oreilly.com/product/9780596802455.do">CSS The Missing Manual</a>.
</div>
        
<h2 id="intro">Introduction</h2>

<p>As you have noticed so far, HTML displays content from top to bottom,
  with most elements stacked as blocks. Today, we will see how to use CSS
  to put elements everywhere in the page, in order to create more visually
  appealing pages.
</p>
 
<p>Most web page designs on the web fall in one of the two types of layout: 
  <em>fixed-width</em> or <em>liquid</em>.</p>
 
<p>Fixed-width design gives you more control over how your pages will
  look, but will cause inconvenience for users with small monitor devices
  (a lot of horizontal scrolling, which people dislike). Liquid
  designs, which grow or shink to fit a browser window, are better for
  users, but make things more difficult for you the designer. 
          
<ul>

  <li>A perfect example of a fixed-width layout is
    the <a href="http://nytimes.com" target="_blank">NY Times</a>
    website. Resize your page. Once your screen has become less than
    970px, you'll see that the scrollbars will show up and the page
    doesn't change.  Most websites on the web have a fixed width, usually
    under 1000px (with a common value of 960px).</li>

  <li>A perfect example of a liquid layout is the
    new <a href="https://www.google.com/maps/preview/"
    target="_blank">Google Maps</a> website. Again, resize your browser to
    see how the page content shrinks or grows with your window size. This
    type of design makes the best use of available space, but you'll need
    to make sure that it looks well on all different device sizes. Our own
    website is also an example of fluid design. Resize the window to
    experience it.</li>
</ul>
          
<h2 id="layout">How CSS layout works</h2>

<p>Web page layout involves putting content into different regions of the
page.  In order to do this, the content needs to be in container tags such
as: <code>nav</code>, <code>header</code>, <code>section</code>, <code>footer</code>, <code>picture</code>, <code>aside</code>,
and the ubiquitous <code>div</code>.  Keep in mind though that you don't
need to use <code>div</code> if it's not called for. Elements that are
displayed as blocks, such as <code>ul</code>, <code>ol</code>,
and <code>p</code> can be also moved everywhere in the page.

</p><h2>Two Techniques for CSS Layout</h2>

<p>There are two general techniques used for layout: <em>floats</em>
 and <em>absolute positioning</em>. Floats are by far the most used, as it
 allows the layout to be fluid. Also, with float layout, content never
 overlaps other content, so even if the layout isn't pretty, it's
 functional.  With absolute positioning, you have the power and burden of
 complete control.  We'll look at both in this reading.

<p>To use float, you start with the normal layout of boxes stacked
 vertically on the page, but you can allow certain elements to move to the
 side and have other material flow around them. To do that, HTML elements
 have a property <code>float</code>, which will make the element float to
 either the left or the right side of the page (your choice). Of course,
 other material can't flow around it unless it is narrow enough, so we
 also have to consider the width of the element. We'll look at that, too.

<p>Absolute positioning allows you to place an element anywhere on the
 page with pixel-like accuracy. To do so, CSS has a <code>position</code>
 property that you set to <code>absolute</code>, and then use additional
 properties like <code>left</code> and <code>top</code> to specify the
 location of the element. This technique doesn't go well with the fluid
 design, but is good for positioning things like logos, etc. that need
 always be in a certain place.  Absolute positioning is sometimes used in
 a limited way as part of an overall layout that mostly uses float.
          
</p><h2 id="strategy">Layout Strategies</h2>

 <p>Web page layout with CSS is more of an art than science; there is no
   formula for marking up your HTML page or creating the CSS. CSS layout
   is something that you will learn through experience, learning the
   different CSS propertis, following tutorials, and practicing a
   lot. What follows in this section is a set of guidelines that can be
   useful as you start learning about this topic.
          
</p><ol>
 
   <li><strong>Start with your content.</strong> Design starts with your
     content (headlines, text, links, photographs, etc.), not with colors,
     fonts, or icons. It is the page message that should dictate the
     design.  For example, if the goal of a student organization page is
     to get more students to join, you can put a large photo of the
     members doing something fun or interesting, together with quotes from
     them. Then you use style to make them compelling.</li>

   <li><strong>Mock up your design.</strong> Don't start your design with
     code, start with a drawing. Using a drawing program (Paint,
     Photoshop, Illustrator, etc.) gives you freedom to explore different
     colors, fonts, images, and positioning, without having to write
     code. This way you can experiment faster with many choices. If your
     page needs user interface elements such as buttons, tabs, etc. you
     can use the free
     <a href="http://developer.yahoo.com/ypatterns/about/stencils/">stencil kit 
       from Yahoo</a>, together with Photoshop.</li>

   <li><strong>Identify the boxes.</strong> Once you are satisfied with
     your mockup, you can start thinking about the HTML
     structure. Basically you need to identify which elements look like
     individual boxes, because they will have to be in container tags in
     your HTML.</li>

   <li><strong>Remember background images.</strong> Very often, you can
     more easily place an image with the <code>background-image</code>
     property than the
     <code>&lt;img&gt;</code> tag. This is because you can put other
     information on top of this image. However, you should know that
     background images are not printed, thus, don't put important
     information (such as maps) as background.</li>

   <li><strong>Layering elements.</strong> Tools like Photoshop use the
     notion of layers to float several things on top of each other. To do
     the same on a web page, there are two options: use
     the <code>background-image</code> property to put text on top of
     images, or use the <code>position</code> property to lay images or
     icons on top of text. You can't use <code>float</code> to make
     content overlap.</li>

   <li><strong>Don't forget margins and paddings.</strong> Often, you
     might not need to use sophisticated CSS for layout. A good use of the
     margin and padding properties can take you really far (especially
     when combined with the background image property).</li>
 </ol>
          
 <h2 id="float">Float-based Layouts</h2>

<p>In this section, we will show with different examples how to build
  float-based layouts. Such layouts make use of the <code>float</code>
  property to position elements side by side and create columns. You can
  also use float to create a wrapping effect. This is because the floated
  element is removed from the flow of the document and what comes after it
  moves up and wraps around the float. (<strong>Note:</strong> Your book
  has a very detailed description of what the flow of a document is.)</p>
          
<h2>Floating an image</h2>            

  <p>As you know, an image is an <em>inline</em> element. To remind you of
    that, look at <a href="page-layout-files/layout_examples/ex1.html">this example</a> and
    resize the browser page to see what happens to the images. You also
    can use Chrome's Inspect Element to notice
    that <code>&lt;img&gt;</code> is nested within
    the <code>p</code>.

  <p>Now, let us look at
    <a href="page-layout-files/layout_examples/ex2.html">the same page</a>
    after applying the following style rules:

    <ul>
      <li>Made the body a fixed width by specifying the width in pixels.
        
      <li>Made the body centered by specifying <code>margin: auto;</code>
      for it.
        
      <li>Made the images float to the right by specifying <code>img { float:
      right; }</code>. 
    </ul>

    <p>Notice how the images are now strictly on the right side of the
    document, and the text of the paragraphs wrap around them. The only
    step that is necessary for this is the last step, but the others are
    nice, too.

<h2>Floating a div (or semantic container)</h2>

<p>Let us now see what happens when we float a container element, such
  as a <code>div</code>, <code>figure</code>, <code>footer</code>, etc.
  Here is <a href="page-layout-files/layout_examples/ex3.html">the unstyled page</a>,
  where we put the <code>img</code> inside the <code>figure</code>
  container.  Notice how this time the images are not inline anymore.
 
  <p>If we apply now the floating property to the <code>figure</code>,
    element, we get the <a href="page-layout-files/layout_examples/ex4.html">same effect</a> 
    as before, with the distinction that
    <code>figure</code> already has some default values for the margin assigned
    by the browser.
          
<p> The <code>float</code> property takes only three
values: <em>left</em>, <em>right</em>, and <em>none</em>. The last value
is used when you want to prevent an element from floating. (There is
  no <code>float: center</code> property; we discussed centering in the
  reading on the <a href="box-model.html">box model</a>.)
</p>
          
<p>Now that we learned about the property float, let's see how it can be
  used to create a layout with columns.</p>
          
<h2 id="two-column-layout">Two-column layout</h2>

<p> In order to have a two-column layout, we need to have two containers
 which can meaningfully stand next to each other; for example,
 a <code>section</code> and an <code>aside</code>. Let's add first
 a <code>aside</code> element to our
  <a href="page-layout-files/layout_examples/ex5.html">Hunger Games example</a>. The
  content will be a header and a list with short lines:

<pre class="prettyprint lang-html"><code class="html">&lt;aside&gt;
    &lt;h3&gt;Characters&lt;/h3&gt;
    &lt;ul&gt;
        &lt;li&gt;Katniss Everdeen&lt;/li&gt;
        &lt;li&gt;Peeta Mellark&lt;/li&gt;
        &lt;li&gt;Gale Hawthorne&lt;/li&gt;
        &lt;li&gt;Primrose Everdeen&lt;/li&gt;
        &lt;li&gt;Haymitch Abernathy&lt;/li&gt;
    &lt;/ul&gt;
&lt;/aside&gt;
</code></pre>  

<p>Then, we apply some minimal style to this element, in order to float on
  the left side, as shown below, getting
  this <a href="page-layout-files/layout_examples/ex6.html">new version</a>.

  <pre class="prettyprint lang-css"><code class="css">aside {
    float: left;
    border: 1px black solid;
    padding: 5px;
}
</code></pre>

<p> <strong>Important Note: </strong> The width and height of every
  <em>floated</em> container element depends on the amount of content
  (text or images) inside the container. This is the <q>shrink-to-fit</q>
  model. If the list above had had some very long items, so that the list
  was as wide as the page, the <code>float</code> property would have no
  effect.
          
<p>As you see from the screenshot below, the <code>aside</code> box size
  can be calculated based on the values for margin, border, padding, and
  content size (e.g. the width: 185px = 0 + 1px + 5px + 173px + 5px + 1px
  + 0).  The 173px comes from the how wide the text in the header and list
  are. Again, if you have a big paragraph of text in your floated element,
  it's likely to be as wide as its container, and the floating will have
  no effect.</p>
          
<figure class="text-center">
  <img src="page-layout-files/images/sidebar_box.png" alt="screenshot of sidebar box"
       class="img-thumbnail">
  <img src="page-layout-files/images/sidebar_calculations.png" alt="screenshot of sidebar box"
       class="img-thumbnail">
  <figcaption>The size of a floated container box depends on its content and styling.</figcaption>
</figure>
          
<p>If you want the size of the column to be something you desire (e.g.,
  instead of width of 185px, to be 200px), you can do the reverse
  calculation to find what the width of the content should be, using a
  simple equation.  For example, 200px = 0 + 2*1px + 2*5px
  + <strong>X</strong>px.  Solving this, we
  get <code>width=188px</code>. This means that in our rule we should set
  the <code>width: 188px;</code>, in order to get the real size of the
  column to 200px on the browser page.
</p>

<p>One could do the same for the height, but this is not very useful,
  because if the adjacent column gets more content, we'll need to
  recalculate.

<p>Now, to achieve our two-column effect, we simply add a margin to the
  non-floating element. Here, we add a margin to the section so that the
  aside floats next to it.  Depending on whether the floating column would
  be on the left or the right side, we need to
  set <code>margin-left</code> or <code>margin-right</code> to a value
  slightly larger than the width of the floating column. Since the aside
  is 185px wide, a margin of 210px should look nice. Therefore, we add the
  following rule:

<pre class="prettyprint lang-css"><code class="css">section {
    margin-left: 210px;
}
</code></pre>

  <p>This is how the finished two-column layout
  looks: <a href="page-layout-files/layout_examples/ex7.html">our two-column
  example</a>.
</p>
          
<h2>Summary: The two-column layout</h2>

<ol>
  <li>Wrap each column in a container, for example, <code>aside</code> 
    and <code>section</code> (or a <code>div</code> with an <code>id</code>attribute).</li>

  <li>Float one container (in our case, <code>aside</code>) either left or right.</li>
  <li>Set a desired width for the floated element.</li>
  <li>Add a margin (left or right, matching the floating side) to the fixed element.</li>
</ol>
          
<div class="alert alert-info">

  <h3>Three-column layout</h3>  

<p>Going from a two-column layout to a three-column layout is a fairly
  straightforward extension. Can you think of the changes you will need to
  make to your HTML and CSS code? To challenge yourself, stop reading at
  this point and go and experiment with the code from the two-column
  layout (get the files from the links above).  Then,
  check <a href="page-layout-files/layout_examples/ex8.html">our solution</a>.  Here is a
  summary of the steps we performed:

  <ul>
    <li>Added a new <code>aside</code> element (before the <code>section</code>).</li>
    <li>Added an ID attribute to each <code>aside</code> element.</li>
    <li>Used these two new IDs as selectors in the CSS code (the rules are
      identical, with the exception of <code>float</code>.</li>
    <li>Added <code>margin-right: 210px;</code> to the section rule, in order
      to allow space for the new floating element.</li>
  </ul>

  <p> <strong>Important Note:</strong> When using this technique (known as
  positive margins), the floating elements need to be placed before the
  main content in the HTML file, otherwise, you will not get the desired
  effect.
</div>
          
<h2 id="clear">Float Problems</h2>

<p>Working with floating elements can often cause unexpected problems. In the 
  following, we will describe two of them together with the solutions.</p>
          
<h2>Clearing Floats</h2>  

<p> We saw that one of the things that happens with floats is that other
  content wraps around them. Often that's what we want, but sometimes it
  isn't.  A problem that occurs often is with the <code>footer</code>
  element of a page, when the main content is shorter than one of the
  floating columns.  To illustrate this problem, we modified the
  <a href="page-layout-files/layout_examples/ex9.html">Hunger Games example</a>
  to show what happens with the footer. Here is a screen shot:
            
<figure class="text-center">
  <img src="page-layout-files/images/clear_footer.png" alt="screenshot of problem with floating"
       class="img-thumbnail">
  <figcaption>The <code>footer</code> (copyright notice) has moved up,
  higher than the floating figure and the aside on the right (the District
  lists).</figcaption>
</figure>
          
<p>Fortunately, there is an easy fix for this problem. We add the property 
  <code>clear</code> in the rule of the element we want to stay away from
  the floats, in our case, <code>footer</code>. What <code>clear</code>
  means is to move the cleared element <em>down</em>, below any floating
  elements. Like this:</p>

<pre class="prettyprint lang-css"><code class="css">footer {
  clear: both;
}</code></pre>
            
<p>After making this change, the footer stays at the 
  <a href="page-layout-files/layout_examples/ex10.html">bottom of the page</a>.</p>
          
<h2>Containing Floats</h2>  

<p>Another problem occurs when a floating element contained within another
  element is larger than its container. This becomes obvious when the
  container has a background color or border.  In our
  ongoing <a href="page-layout-files/layout_examples/ex11.html">Hunger
  Games example</a>, we changed the background color of
  the <code>section</code> element to olive, so that now you can see, in
  the screenshot below, that the floating element (the figure) had come out of
  its container (the section).  It had always been outside its container,
  but we just hadn't noticed.

  <figure class="text-center">
    <img src="page-layout-files/images/containing-float.png" alt="screenshot of problem with floating"
         class="img-thumbnail">
    <figcaption>The problem created by a floating element bigger than its container.</figcaption>
  </figure>
          
  <p>There are several solutions to this problem, but we will show the two
  simplest.

  <ol>

    <li>Add an element at the bottom of the container, in order to use
      clear. In
      our <a href="page-layout-files/layout_examples/ex12.html">solution
      using clear</a>, we added a <code>&lt;br class="clear"&gt;</code>
      element before the end of the section and a CSS rule for
      it <code>br.clear {clear: both;}</code>.</li>

    <li>Use a dedicated CSS property for the container
      element, <code>overflow: hidden;</code>.  Here is
      again <a href="page-layout-files/layout_examples/ex13.html">solution
      using overflow hidden</a>. While this CSS property works very well,
      its name can be confusing, since the effect is not to hide the
      overflow (the floated element that sticks out), but instead it
      enlarges the containing element so that the floated element no
      longer sticks out.
    </li>
    
  </ol>
          
  <h2 id="position">Positioning Elements on Page</h2>

<p>At the beginning of these notes we mentioned that floats are the most
  used technique for designing layouts. However, there is another
  technique, <em>positioning</em>, which has its good uses in particular
  situations.</p>
          
<p>We achieve positioning of elements through the
  property <code>position</code>, which can take these values:</p>
          
<ul>
  <li>absolute</li>
  <li>relative</li>
  <li>fixed</li>
  <li>static (this is the default value)</li>
</ul>
          
<p>The values <em>absolute</em> and <em>fixed</em> are very similar in
  their syntax (though they create different effects) and more easy to
  understand. The value <em>relative</em> is a bit more tricky, because
  its meaning is not in par with how we use the word in everyday
  language. To explain these values, we will show in the following an
  example for each. You should look at the HTML and CSS files of each
  example to better understand what is going on.</p>
          
<h2>position: absolute</h2>  

<p>We can use this style to set an element in a desired location in the
  page, by additionally specifying a horizontal and vertical position
  using the
  properties <code>left</code>, <code>right</code>, <code>top</code>,
  and <code>bottom</code>. These properties specify the distance (in
  pixels or some other <a href="../BoxModel/#units">units</a>) from the
  (0,0) coordinates of some reference container.  Usually, the reference
  container is the <em>viewport</em> (top-left corner of the browser
  viewing area).

<p>To see this in action we have
  a <a href="page-layout-files/layout_examples/ex14.html">modified
  version</a> of our Hunger Games example, and we will try to position
  the <code>figure</code> to some other location, as shown in
  this <a href="page-layout-files/layout_examples/ex15.html"> styled
  version of the example</a>.
            
  This effect was achieved with this CSS code:
            <pre><code class="css">
figure {
  position: absolute;
  top: 350px;
  left: 500px;
  border: 1px black solid;
  padding: 3px;
}
</code></pre>

<p>Notice how the figure lays on top of the text. This is because by becoming
  <em>absolute</em>, the other elements are not aware of it anymore, so
  they cannot flow around it. Additionally, try to resize your browser
  window.  The placement of the figure doesn't change.
          
  <h2 id="position_relative">position: relative</h2>  

<p>Suppose we want to put a caption on the figure, sitting on top of it,
  instead of below it. In this case, we will need to use
  the <em>relative</em> position. However to achieve this, we need to do
  two things:

  <ol>

    <li>Declare which is the element relative to which this positioning is
      going to happen.  This is the reference container that we mentioned
      in the previous section.</li>

    <li>Declare as <em>absolute</em> the element we want to position, and
      specify its coordinates relative to the reference container.</li>
  </ol>

<p>This <a href="page-layout-files/layout_examples/ex16.html">new
 example</a>, creates a caption over the figure with the following code:
            
  <div class="half">
  <pre><code class="css">figure {
  <strong>position: relative;</strong>
  border: 1px black solid;
  padding: 3px;
  width: 400px;
}
</code></pre>
  </div>
  <div class="half"><pre><code class="css">figcaption {
  <strong>position: absolute;</strong>
  bottom: 15px;
  left: 4px;
  right: 4px;
  color: yellow;
  background-color: black;
  opacity: 0.5;
  text-align: center;
  font-weight: 200%;
  padding: 5px;
}
</code></pre>
  </div>             
          
<p>So, the <code>bottom</code> and <code>left</code> lengths in
  the <code>figcaption</code> are measured from the upper left of
  the <code>figure</code>, not from the window.

  <h2>position: fixed</h2>  

  <p>This positioning is very similar to the <em>absolute</em> one, with
    the difference that the element remains in its position all the time,
    while the rest of the page scrolls up and down. You can think of it as
    positioning relative to the <em>screen</em>. It is useful for fixing
    navbars or sidebars in one position. See how the <code>aside</code>
    element remains fixed
    in <a href="page-layout-files/layout_examples/ex17.html">our
    example</a>, with the code below:

            <pre><code class="css">aside {
  position: fixed;
  top: 80px;
  border: 1px black solid;
  padding: 5px;
  width: 188px; /* this value will make sure the sidebar box will occupy 200px */
}
</code></pre>
          
